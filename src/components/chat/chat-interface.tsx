'use client';

import { useState, useRef, useEffect, FormEvent } from 'react';
import { Send } from 'lucide-react';
import { AnimatePresence, motion } from 'framer-motion';

import { cn } from '@/lib/utils';
import type { Message, TicketOrder } from '@/lib/types';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ChatBubble } from './chat-bubble';
import { Calendar } from '../ui/calendar';
import { TicketSummary } from './ticket-summary';
import { PaymentDialog } from './payment-dialog';
import { DigitalTicket } from './digital-ticket';
import { getAnswer } from '@/ai/flows/faq-flow';

const translations = {
  en: {
    welcome: "Hello! I'm Museum Buddy. How can I help you today?",
    bookTickets: 'Book Tickets',
    askQuestion: 'Ask a Question',
    askMeAnything: 'What would you like to know about the museum?',
    selectMuseum: 'Awesome! Please select a museum.',
    chooseExperience: 'Great! Which experience are you interested in?',
    generalAdmission: 'General Admission',
    specialExhibition: 'Special Exhibition: "Cosmos"',
    selectDate: 'Please select a date for your visit.',
    selectTime: 'Excellent! Please select a time slot.',
    selectQuantity: 'How many tickets do you need?',
    adult: 'Adult',
    child: 'Child',
    proceedToPayment: 'Proceed to Payment',
    orderSummary: 'Here is your order summary:',
    paymentSuccessful: 'Payment successful! ЁЯОЙ',
    ticketIssued: 'Your digital ticket is ready. We look forward to seeing you!',
    showTimes: 'Showtimes',
    prices: 'Ticket Prices',
    faqResponse: 'You can find information about our hours, location, and current exhibitions on our website.',
    invalidSelection: "Sorry, I didn't understand that. Please choose one of the options.",
    times: ['10:00 AM', '12:00 PM', '2:00 PM', '4:00 PM'],
    museums: [
      'National Museum, New Delhi',
      'Indian Museum, Kolkata',
      'Salar Jung Museum, Hyderabad',
      'Chhatrapati Shivaji Maharaj Vastu Sangrahalaya, Mumbai',
    ],
  },
  hi: {
    welcome: 'рдирдорд╕реНрддреЗ! рдореИрдВ рдореНрдпреВрдЬрд┐рдпрдо рдмрдбреА рд╣реВрдВред рдореИрдВ рдЖрдЬ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?',
    bookTickets: 'рдЯрд┐рдХрдЯ рдмреБрдХ рдХрд░реЗрдВ',
    askQuestion: 'рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ',
    askMeAnything: 'рдЖрдк рд╕рдВрдЧреНрд░рд╣рд╛рд▓рдп рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреНрдпрд╛ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?',
    selectMuseum: 'рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛! рдХреГрдкрдпрд╛ рдПрдХ рд╕рдВрдЧреНрд░рд╣рд╛рд▓рдп рдЪреБрдиреЗрдВред',
    chooseExperience: 'рдмрдврд╝рд┐рдпрд╛! рдЖрдк рдХрд┐рд╕ рдЕрдиреБрднрд╡ рдореЗрдВ рд░реБрдЪрд┐ рд░рдЦрддреЗ рд╣реИрдВ?',
    generalAdmission: 'рд╕рд╛рдорд╛рдиреНрдп рдкреНрд░рд╡реЗрд╢',
    specialExhibition: 'рд╡рд┐рд╢реЗрд╖ рдкреНрд░рджрд░реНрд╢рдиреА: "рдХреЙрд╕рдореЙрд╕"',
    selectDate: 'рдХреГрдкрдпрд╛ рдЕрдкрдиреА рдпрд╛рддреНрд░рд╛ рдХреЗ рд▓рд┐рдП рдПрдХ рддрд╛рд░реАрдЦ рдЪреБрдиреЗрдВред',
    selectTime: 'рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛! рдХреГрдкрдпрд╛ рдПрдХ рд╕рдордп рд╕реНрд▓реЙрдЯ рдЪреБрдиреЗрдВред',
    selectQuantity: 'рдЖрдкрдХреЛ рдХрд┐рддрдиреЗ рдЯрд┐рдХрдЯ рдЪрд╛рд╣рд┐рдП?',
    adult: 'рд╡рдпрд╕реНрдХ',
    child: 'рдмрдЪреНрдЪрд╛',
    proceedToPayment: 'рднреБрдЧрддрд╛рди рдХреЗ рд▓рд┐рдП рдЖрдЧреЗ рдмрдврд╝реЗрдВ',
    orderSummary: 'рдпрд╣ рдЖрдкрдХреЗ рдЖрджреЗрд╢ рдХрд╛ рд╕рд╛рд░рд╛рдВрд╢ рд╣реИ:',
    paymentSuccessful: 'рднреБрдЧрддрд╛рди рд╕рдлрд▓! ЁЯОЙ',
    ticketIssued: 'рдЖрдкрдХрд╛ рдбрд┐рдЬрд┐рдЯрд▓ рдЯрд┐рдХрдЯ рддреИрдпрд╛рд░ рд╣реИред рд╣рдо рдЖрдкрдХреЛ рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдЙрддреНрд╕реБрдХ рд╣реИрдВ!',
    showTimes: 'рд╢реЛ рдХреЗ рд╕рдордп',
    prices: 'рдЯрд┐рдХрдЯ рдХреА рдХреАрдорддреЗрдВ',
    faqResponse: 'рдЖрдк рд╣рдорд╛рд░реА рд╡реЗрдмрд╕рд╛рдЗрдЯ рдкрд░ рд╣рдорд╛рд░реЗ рдШрдВрдЯреЗ, рд╕реНрдерд╛рди рдФрд░ рд╡рд░реНрддрдорд╛рди рдкреНрд░рджрд░реНрд╢рдирд┐рдпреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдХрд╛рд░реА рдкрд╛ рд╕рдХрддреЗ рд╣реИрдВред',
    invalidSelection: 'рдорд╛рдлрд╝ рдХреАрдЬрд┐рдП, рдореИрдВ рдпрд╣ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред рдХреГрдкрдпрд╛ рд╡рд┐рдХрд▓реНрдкреЛрдВ рдореЗрдВ рд╕реЗ рдПрдХ рдЪреБрдиреЗрдВред',
    times: ['рд╕реБрдмрд╣ 10:00', 'рджреЛрдкрд╣рд░ 12:00', 'рджреЛрдкрд╣рд░ 2:00', 'рд╢рд╛рдо 4:00'],
    museums: [
      'рд░рд╛рд╖реНрдЯреНрд░реАрдп рд╕рдВрдЧреНрд░рд╣рд╛рд▓рдп, рдирдИ рджрд┐рд▓реНрд▓реА',
      'рднрд╛рд░рддреАрдп рд╕рдВрдЧреНрд░рд╣рд╛рд▓рдп, рдХреЛрд▓рдХрд╛рддрд╛',
      'рд╕рд╛рд▓рд╛рд░ рдЬрдВрдЧ рд╕рдВрдЧреНрд░рд╣рд╛рд▓рдп, рд╣реИрджрд░рд╛рдмрд╛рдж',
      'рдЫрддреНрд░рдкрддрд┐ рд╢рд┐рд╡рд╛рдЬреА рдорд╣рд╛рд░рд╛рдЬ рд╡рд╛рд╕реНрддреБ рд╕рдВрдЧреНрд░рд╣рд╛рд▓рдп, рдореБрдВрдмрдИ',
    ],
  },
  bn: {
    welcome: 'ржиржорж╕рзНржХрж╛рж░! ржЖржорж┐ ржорж┐ржЙржЬрж┐ржпрж╝рж╛ржо ржмрж╛ржбрж┐ред ржЖржорж┐ ржЖржЬ ржЖржкржирж╛ржХрзЗ ржХрж┐ржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐?',
    bookTickets: 'ржЯрж┐ржХрж┐ржЯ ржмрзБржХ ржХрж░рзБржи',
    askQuestion: 'ржкрзНрж░рж╢рзНржи ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи',
    askMeAnything: 'ржЖржкржирж┐ ржЬрж╛ржжрзБржШрж░ рж╕ржорзНржкрж░рзНржХрзЗ ржХрж┐ ржЬрж╛ржирждрзЗ ржЪрж╛ржи?',
    selectMuseum: 'ржжрж╛рж░рзБржг! ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржХржЯрж┐ ржЬрж╛ржжрзБржШрж░ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред',
    chooseExperience: 'ржжрж╛рж░рзБржг! ржЖржкржирж┐ ржХрзЛржи ржЕржнрж┐ржЬрзНржЮрждрж╛ржпрж╝ ржЖржЧрзНрж░рж╣рзА?',
    generalAdmission: 'рж╕рж╛ржзрж╛рж░ржг ржнрж░рзНрждрж┐',
    specialExhibition: 'ржмрж┐рж╢рзЗрж╖ ржкрзНрж░ржжрж░рзНрж╢ржирзА: "ржХрж╕ржорж╕"',
    selectDate: 'ржЖржкржирж╛рж░ ржкрж░рж┐ржжрж░рзНрж╢ржирзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ рждрж╛рж░рж┐ржЦ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред',
    selectTime: 'ржЪржорзОржХрж╛рж░! ржПржХржЯрж┐ рж╕ржоржпрж╝ рж╕рзНрж▓ржЯ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред',
    selectQuantity: 'ржЖржкржирж╛рж░ ржХрждржЧрзБрж▓рзЛ ржЯрж┐ржХрж┐ржЯ рж▓рж╛ржЧржмрзЗ?',
    adult: 'ржкрзНрж░рж╛ржкрзНрждржмржпрж╝рж╕рзНржХ',
    child: 'рж╢рж┐рж╢рзБ',
    proceedToPayment: 'ржкрзЗржорзЗржирзНржЯрзЗрж░ ржЬржирзНржп ржПржЧрж┐ржпрж╝рзЗ ржпрж╛ржи',
    orderSummary: 'ржПржЦрж╛ржирзЗ ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░рзЗрж░ рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржк:',
    paymentSuccessful: 'ржкрзЗржорзЗржирзНржЯ рж╕ржлрж▓! ЁЯОЙ',
    ticketIssued: 'ржЖржкржирж╛рж░ ржбрж┐ржЬрж┐ржЯрж╛рж▓ ржЯрж┐ржХрж┐ржЯ ржкрзНрж░рж╕рзНрждрзБрждред ржЖржорж░рж╛ ржЖржкржирж╛ржХрзЗ ржжрзЗржЦрж╛рж░ ржЬржирзНржп ржЙржирзНржорзБржЦ!',
    showTimes: 'ржкрзНрж░ржжрж░рзНрж╢ржирзЗрж░ рж╕ржоржпрж╝',
    prices: 'ржЯрж┐ржХрж┐ржЯрзЗрж░ ржорзВрж▓рзНржп',
    faqResponse: 'ржЖржкржирж┐ ржЖржорж╛ржжрзЗрж░ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯрзЗ ржЖржорж╛ржжрзЗрж░ рж╕ржоржпрж╝, ржЕржмрж╕рзНржерж╛ржи ржПржмржВ ржмрж░рзНрждржорж╛ржи ржкрзНрж░ржжрж░рзНрж╢ржирзА рж╕ржорзНржкрж░рзНржХрзЗ рждржерзНржп ржкрзЗрждрзЗ ржкрж╛рж░рзЗржиред',
    invalidSelection: 'ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржмрж┐ржХрж▓рзНржкржЧрзБрж▓рзЛ ржерзЗржХрзЗ ржПржХржЯрж┐ ржмрзЗржЫрзЗ ржирж┐ржиред',
    times: ['рж╕ржХрж╛рж▓ рззрзж:рзжрзж', 'ржжрзБржкрзБрж░ рззрзи:рзжрзж', 'ржжрзБржкрзБрж░ рзи:рзжрзж', 'ржмрж┐ржХрж╛рж▓ рзк:рзжрзж'],
    museums: [
      'ржЬрж╛рждрзАржпрж╝ ржЬрж╛ржжрзБржШрж░, ржирждрзБржи ржжрж┐рж▓рзНрж▓рж┐',
      'ржнрж╛рж░рждрзАржпрж╝ ржЬрж╛ржжрзБржШрж░, ржХрж▓ржХрж╛рждрж╛',
      'рж╕рж╛рж▓рж╛рж░ ржЬржВ ржЬрж╛ржжрзБржШрж░, рж╣рж╛ржпрж╝ржжрзНрж░рж╛ржмрж╛ржж',
      'ржЫрждрзНрж░ржкрждрж┐ рж╢рж┐ржмрж╛ржЬрзА ржорж╣рж╛рж░рж╛ржЬ рд╡рд╛рд╕реНрддреБ рж╕ржВржЧрзНрж░рж╣рж╛рж▓ржпрж╝, ржорзБржорзНржмрж╛ржЗ',
    ],
  },
  ta: {
    welcome: 'ро╡рогроХрпНроХроорпН! роиро╛ройрпН рооро┐ропрпВроЪро┐ропроорпН рокроЯро┐. роЗройрпНро▒рпБ роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роОрокрпНрокроЯро┐ роЙродро╡ роорпБроЯро┐ропрпБроорпН?',
    bookTickets: 'роЯро┐роХрпНроХрпЖроЯрпНроЯрпБроХро│рпИ роорпБройрпНрокродро┐ро╡рпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН',
    askQuestion: 'роХрпЗро│рпНро╡ро┐ роХрпЗро│рпБроЩрпНроХро│рпН',
    askMeAnything: 'роЕро░рпБроЩрпНроХро╛роЯрпНроЪро┐ропроХродрпНродрпИрокрпН рокро▒рпНро▒ро┐ роирпАроЩрпНроХро│рпН роОройрпНрой родрпЖро░ро┐роирпНродрпБ роХрпКро│рпНро│ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?',
    selectMuseum: 'роЕро▒рпНрокрпБродроорпН! роЕро░рпБроЩрпНроХро╛роЯрпНроЪро┐ропроХродрпНродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН.',
    chooseExperience: 'роЕро░рпБроорпИ! роирпАроЩрпНроХро│рпН роОроирпНрод роЕройрпБрокро╡родрпНродро┐ро▓рпН роЖро░рпНро╡рооро╛роХ роЙро│рпНро│рпАро░рпНроХро│рпН?',
    generalAdmission: 'рокрпКродрпБ роЕройрпБроородро┐',
    specialExhibition: 'роЪро┐ро▒рокрпНрокрпБ роХрогрпНроХро╛роЯрпНроЪро┐: "роХро╛ро╕рпНроорпЛро╕рпН"',
    selectDate: 'роЙроЩрпНроХро│рпН ро╡ро░рпБроХрпИроХрпНроХро╛рой родрпЗродро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН.',
    selectTime: 'роЕро░рпБроорпИ! роирпЗро░родрпНродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН.',
    selectQuantity: 'роЙроЩрпНроХро│рпБроХрпНроХрпБ роОродрпНродройрпИ роЯро┐роХрпНроХрпЖроЯрпНроЯрпБроХро│рпН родрпЗро╡рпИ?',
    adult: 'рокрпЖро░ро┐ропро╡ро░рпН',
    child: 'роХрпБро┤роирпНродрпИ',
    proceedToPayment: 'рокрогроорпН роЪрпЖро▓рпБродрпНрод родрпКроЯро░ро╡рпБроорпН',
    orderSummary: 'роЙроЩрпНроХро│рпН роЖро░рпНроЯро░рпН роЪрпБро░рпБроХрпНроХроорпН роЗродрпЛ:',
    paymentSuccessful: 'рокрогроорпН роЪрпЖро▓рпБродрпНродрпБродро▓рпН ро╡рпЖро▒рпНро▒ро┐! ЁЯОЙ',
    ticketIssued: 'роЙроЩрпНроХро│рпН роЯро┐роЬро┐роЯрпНроЯро▓рпН роЯро┐роХрпНроХрпЖроЯрпН родропро╛ро░ро╛роХ роЙро│рпНро│родрпБ. роЙроЩрпНроХро│рпИ роЪроирпНродро┐рокрпНрокродрпИ роиро╛роЩрпНроХро│рпН роЖро╡ро▓рпБроЯройрпН роОродро┐ро░рпНрокро╛ро░рпНроХрпНроХро┐ро▒рпЛроорпН!',
    showTimes: 'роХро╛роЯрпНроЪро┐ роирпЗро░роЩрпНроХро│рпН',
    prices: 'роЯро┐роХрпНроХрпЖроЯрпН ро╡ро┐ро▓рпИроХро│рпН',
    faqResponse: 'роОроЩрпНроХро│рпН ро╡ро▓рпИродрпНродро│родрпНродро┐ро▓рпН роОроЩрпНроХро│рпН роирпЗро░роорпН, роЗроЯроорпН рооро▒рпНро▒рпБроорпН родро▒рпНрокрпЛродрпИроп роХрогрпНроХро╛роЯрпНроЪро┐роХро│рпН рокро▒рпНро▒ро┐роп родроХро╡ро▓рпНроХро│рпИ роирпАроЩрпНроХро│рпН роХро╛рогро▓ро╛роорпН.',
    invalidSelection: 'рооройрпНройро┐роХрпНроХро╡рпБроорпН, роОройроХрпНроХрпБрокрпН рокрпБро░ро┐ропро╡ро┐ро▓рпНро▓рпИ. ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│ро┐ро▓рпН роТройрпНро▒рпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН.',
    times: ['роХро╛ро▓рпИ 10:00', 'роородро┐ропроорпН 12:00', 'роородро┐ропроорпН 2:00', 'рооро╛ро▓рпИ 4:00'],
    museums: [
      'родрпЗроЪро┐роп роЕро░рпБроЩрпНроХро╛роЯрпНроЪро┐ропроХроорпН, рокрпБродрпБ роЯрпЖро▓рпНро▓ро┐',
      'роЗроирпНродро┐роп роЕро░рпБроЩрпНроХро╛роЯрпНроЪро┐ропроХроорпН, роХрпКро▓рпНроХродрпНродро╛',
      'роЪро╛ро▓ро╛ро░рпН роЬроЩрпН роЕро░рпБроЩрпНроХро╛роЯрпНроЪро┐ропроХроорпН, ро╣рпИродро░ро╛рокро╛родрпН',
      'роЪродрпНро░рокродро┐ роЪро┐ро╡ро╛роЬро┐ роороХро╛ро░ро╛роЬрпН р▓╡р▓╕р│Нр▓др│Б роЪроЩрпНроХро░ро╛ро▓ропро╛, роорпБроорпНрокрпИ',
    ],
  },
  te: {
    welcome: 'р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б р░ор▒Нр░пр▒Вр░Ьр░┐р░пр░В р░мр░бр▒Нр░бр▒Ар░ир░┐. р░И р░░р▒Лр░Ьр▒Б р░ир▒Зр░ир▒Б р░ор▒Ар░Хр▒Б р░Ор░▓р░╛ р░╕р░╣р░╛р░пр░кр░бр░Чр░▓р░ир▒Б?',
    bookTickets: 'р░Яр░┐р░Хр▒Нр░Хр▒Жр░Яр▒Нр░▓р░ир▒Б р░мр▒Бр░Хр▒Н р░Ър▒Зр░пр░Вр░бр░┐',
    askQuestion: 'р░кр▒Нр░░р░╢р▒Нр░и р░Ер░бр░Чр░Вр░бр░┐',
    askMeAnything: 'р░ор▒Ар░░р▒Б р░ор▒Нр░пр▒Вр░Ьр░┐р░пр░В р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Пр░ор░┐ р░др▒Жр░▓р▒Бр░╕р▒Бр░Хр▒Лр░╡р░╛р░▓р░ир▒Бр░Хр▒Бр░Вр░Яр▒Бр░ир▒Нр░ир░╛р░░р▒Б?',
    selectMuseum: 'р░Ер░жр▒Нр░нр▒Бр░др░В! р░жр░пр░Ър▒Зр░╕р░┐ р░Тр░Х р░ор▒Нр░пр▒Вр░Ьр░┐р░пр░Вр░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐.',
    chooseExperience: 'р░Ер░жр▒Нр░нр▒Бр░др░В! р░ор▒Ар░░р▒Б р░П р░Ер░ир▒Бр░нр░╡р░Вр░▓р▒Л р░Жр░╕р░Хр▒Нр░др░┐р░Чр░╛ р░Йр░ир▒Нр░ир░╛р░░р▒Б?',
    generalAdmission: 'р░╕р░╛р░зр░╛р░░р░г р░кр▒Нр░░р░╡р▒Зр░╢р░В',
    specialExhibition: 'р░кр▒Нр░░р░др▒Нр░пр▒Зр░Х р░кр▒Нр░░р░жр░░р▒Нр░╢р░и: "р░Хр░╛р░╕р▒Нр░ор▒Лр░╕р▒Н"',
    selectDate: 'р░ор▒А р░╕р░Вр░жр░░р▒Нр░╢р░и р░Хр▒Лр░╕р░В р░жр░пр░Ър▒Зр░╕р░┐ р░Тр░Х р░др▒Зр░жр▒Ар░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐.',
    selectTime: 'р░Ер░жр▒Нр░нр▒Бр░др░В! р░жр░пр░Ър▒Зр░╕р░┐ р░Тр░Х р░╕р░ор░п р░╕р▒Нр░▓р░╛р░Яр▒НтАМр░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐.',
    selectQuantity: 'р░ор▒Ар░Хр▒Б р░Ор░ир▒Нр░ир░┐ р░Яр░┐р░Хр▒Нр░Хр▒Жр░Яр▒Нр░▓р▒Б р░Хр░╛р░╡р░╛р░▓р░┐?',
    adult: 'р░кр▒Жр░жр▒Нр░жр░▓р▒Б',
    child: 'р░кр░┐р░▓р▒Нр░▓р░▓р▒Б',
    proceedToPayment: 'р░Ър▒Жр░▓р▒Нр░▓р░┐р░Вр░кр▒Бр░Хр▒Б р░Хр▒Кр░ир░╕р░╛р░Чр░Вр░бр░┐',
    orderSummary: 'р░Зр░жр░┐р░Чр▒Л р░ор▒А р░Жр░░р▒Нр░бр░░р▒Н р░╕р░╛р░░р░╛р░Вр░╢р░В:',
    paymentSuccessful: 'р░Ър▒Жр░▓р▒Нр░▓р░┐р░Вр░кр▒Б р░╡р░┐р░Ьр░пр░╡р░Вр░др░ор▒Ир░Вр░жр░┐! ЁЯОЙ',
    ticketIssued: 'р░ор▒А р░бр░┐р░Ьр░┐р░Яр░▓р▒Н р░Яр░┐р░Хр▒Жр░Яр▒Н р░╕р░┐р░жр▒Нр░зр░Вр░Чр░╛ р░Йр░Вр░жр░┐. р░ор░┐р░ор▒Нр░ор░▓р▒Нр░ир░┐ р░Ър▒Вр░бр░Яр░╛р░ир░┐р░Хр░┐ р░ор▒Зр░ор▒Б р░Ор░жр▒Бр░░р▒Бр░Ър▒Вр░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ор▒Б!',
    showTimes: 'р░кр▒Нр░░р░жр░░р▒Нр░╢р░и р░╕р░ор░пр░╛р░▓р▒Б',
    prices: 'р░Яр░┐р░Хр▒Жр░Яр▒Н р░зр░░р░▓р▒Б',
    faqResponse: 'р░ор▒Ар░░р▒Б р░ор░╛ р░Чр░Вр░Яр░▓р▒Б, р░кр▒Нр░░р░жр▒Зр░╢р░В р░ор░░р░┐р░пр▒Б р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д р░кр▒Нр░░р░жр░░р▒Нр░╢р░ир░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░ор░╛ р░╡р▒Жр░мр▒НтАМр░╕р▒Ир░Яр▒НтАМр░▓р▒Л р░╕р░ор░╛р░Ър░╛р░░р░╛р░ир▒Нр░ир░┐ р░Хр░ир▒Бр░Чр▒Кр░ир░╡р░Ър▒Нр░Ър▒Б.',
    invalidSelection: 'р░Хр▒Нр░╖р░ор░┐р░Вр░Ър░Вр░бр░┐, р░ир░╛р░Хр▒Б р░Ер░░р▒Нр░ер░В р░Хр░╛р░▓р▒Зр░жр▒Б. р░жр░пр░Ър▒Зр░╕р░┐ р░Ор░Вр░кр░┐р░Хр░▓р░▓р▒Л р░Тр░Хр░жр░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐.',
    times: ['р░Йр░жр░пр░В 10:00', 'р░ор░зр▒Нр░пр░╛р░╣р▒Нр░ир░В 12:00', 'р░ор░зр▒Нр░пр░╛р░╣р▒Нр░ир░В 2:00', 'р░╕р░╛р░пр░Вр░др▒Нр░░р░В 4:00'],
    museums: [
      'р░Ьр░╛р░др▒Ар░п р░ор▒Нр░пр▒Вр░Ьр░┐р░пр░В, р░ир▒Нр░пр▒Вр░вр░┐р░▓р▒Нр░▓р▒А',
      'р░Зр░Вр░бр░┐р░пр░ир▒Н р░ор▒Нр░пр▒Вр░Ьр░┐р░пр░В, р░Хр▒Лр░▓р▒НтАМр░Хр░др░╛',
      'р░╕р░╛р░▓р░╛р░░р▒Н р░Ьр░Вр░Чр▒Н р░ор▒Нр░пр▒Вр░Ьр░┐р░пр░В, р░╣р▒Ир░жр░░р░╛р░мр░╛р░жр▒Н',
      'р░Ыр░др▒Нр░░р░кр░др░┐ р░╢р░┐р░╡р░╛р░Ьр▒А р░ор░╣р░╛р░░р░╛р░Ьр▒Н р░╡р░╛р░╕р▒Нр░др▒Б р░╕р░Вр░Чр▒Нр░░р░╣р░╛р░▓р░пр░В, р░ор▒Бр░Вр░мр▒И',
    ],
  },
  kn: {
    welcome: 'р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░! р▓ир▓╛р▓ир│Б р▓ор│Нр▓пр│Вр▓╕р▓┐р▓пр▓В р▓мр▓бр│Нр▓бр▓┐. р▓Зр▓Вр▓жр│Б р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор▓Чр│Ж р▓╣р│Зр▓Чр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓мр▓╣р│Бр▓жр│Б?',
    bookTickets: 'р▓Яр▓┐р▓Хр│Жр▓Яр│Н р▓мр│Бр▓Хр│Н р▓ор▓╛р▓бр▓┐',
    askQuestion: 'р▓кр│Нр▓░р▓╢р│Нр▓ир│Ж р▓Хр│Зр▓│р▓┐',
    askMeAnything: 'р▓╡р▓╕р│Нр▓др│Бр▓╕р▓Вр▓Чр│Нр▓░р▓╣р▓╛р▓▓р▓пр▓ж р▓мр▓Чр│Нр▓Чр│Ж р▓ир│Ар▓╡р│Б р▓Пр▓ир│Б р▓др▓┐р▓│р▓┐р▓пр▓▓р│Б р▓мр▓пр▓╕р│Бр▓др│Нр▓др│Ар▓░р▓┐?',
    selectMuseum: 'р▓Ер▓жр│Нр▓нр│Бр▓д! р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓╡р▓╕р│Нр▓др│Бр▓╕р▓Вр▓Чр│Нр▓░р▓╣р▓╛р▓▓р▓пр▓╡р▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐.',
    chooseExperience: 'р▓Ер▓жр│Нр▓нр│Бр▓д! р▓ир│Ар▓╡р│Б р▓пр▓╛р▓╡ р▓Ер▓ир│Бр▓нр▓╡р▓жр▓▓р│Нр▓▓р▓┐ р▓Жр▓╕р▓Хр│Нр▓др▓┐ р▓╣р│Кр▓Вр▓жр▓┐р▓жр│Нр▓жр│Ар▓░р▓┐?',
    generalAdmission: 'р▓╕р▓╛р▓ор▓╛р▓ир│Нр▓п р▓кр│Нр▓░р▓╡р│Зр▓╢',
    specialExhibition: 'р▓╡р▓┐р▓╢р│Зр▓╖ р▓кр│Нр▓░р▓жр▓░р│Нр▓╢р▓и: "р▓мр│Нр▓░р▓╣р│Нр▓ор▓╛р▓Вр▓б"',
    selectDate: 'р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ир▓┐р▓ор│Нр▓о р▓нр│Зр▓Яр▓┐р▓Чр▓╛р▓Чр▓┐ р▓жр▓┐р▓ир▓╛р▓Вр▓Хр▓╡р▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐.',
    selectTime: 'р▓Ер▓др│Нр▓пр│Бр▓др│Нр▓др▓о! р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓╕р▓ор▓пр▓ж р▓╕р│Нр▓▓р▓╛р▓Яр│Н р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐.',
    selectQuantity: 'р▓ир▓┐р▓ор▓Чр│Ж р▓Ор▓╖р│Нр▓Яр│Б р▓Яр▓┐р▓Хр│Жр▓Яр│НтАМр▓Чр▓│р│Б р▓мр│Зр▓Хр│Б?',
    adult: 'р▓╡р▓пр▓╕р│Нр▓Х',
    child: 'р▓ор▓Чр│Б',
    proceedToPayment: 'р▓кр▓╛р▓╡р▓др▓┐р▓Чр│Ж р▓ор│Бр▓Вр▓жр│Бр▓╡р▓░р▓┐р▓пр▓┐р▓░р▓┐',
    orderSummary: 'р▓ир▓┐р▓ор│Нр▓о р▓Жр▓жр│Зр▓╢р▓ж р▓╕р▓╛р▓░р▓╛р▓Вр▓╢ р▓Зр▓▓р│Нр▓▓р▓┐р▓жр│Ж:',
    paymentSuccessful: 'р▓кр▓╛р▓╡р▓др▓┐ р▓пр▓╢р▓╕р│Нр▓╡р▓┐р▓пр▓╛р▓Чр▓┐р▓жр│Ж! ЁЯОЙ',
    ticketIssued: 'р▓ир▓┐р▓ор│Нр▓о р▓бр▓┐р▓Ьр▓┐р▓Яр▓▓р│Н р▓Яр▓┐р▓Хр│Жр▓Яр│Н р▓╕р▓┐р▓жр│Нр▓зр▓╡р▓╛р▓Чр▓┐р▓жр│Ж. р▓ир▓┐р▓ор│Нр▓ор▓ир│Нр▓ир│Б р▓ир│Лр▓бр▓▓р│Б р▓ир▓╛р▓╡р│Б р▓Ор▓жр│Бр▓░р│Б р▓ир│Лр▓бр│Бр▓др│Нр▓др▓┐р▓жр│Нр▓жр│Зр▓╡р│Ж!',
    showTimes: 'р▓кр│Нр▓░р▓жр▓░р│Нр▓╢р▓и р▓╕р▓ор▓пр▓Чр▓│р│Б',
    prices: 'р▓Яр▓┐р▓Хр│Жр▓Яр│Н р▓жр▓░р▓Чр▓│р│Б',
    faqResponse: 'р▓ир│Ар▓╡р│Б р▓ир▓ор│Нр▓о р▓╡р│Жр▓мр│НтАМр▓╕р│Ир▓Яр│НтАМр▓ир▓▓р│Нр▓▓р▓┐ р▓ир▓ор│Нр▓о р▓╕р▓ор▓п, р▓╕р│Нр▓ер▓│ р▓ор▓др│Нр▓др│Б р▓кр│Нр▓░р▓╕р│Нр▓др│Бр▓д р▓кр│Нр▓░р▓жр▓░р│Нр▓╢р▓ир▓Чр▓│ р▓мр▓Чр│Нр▓Чр│Ж р▓ор▓╛р▓╣р▓┐р▓др▓┐р▓пр▓ир│Нр▓ир│Б р▓Хр▓╛р▓гр▓мр▓╣р│Бр▓жр│Б.',
    invalidSelection: 'р▓Хр│Нр▓╖р▓ор▓┐р▓╕р▓┐, р▓ир▓ир▓Чр│Ж р▓Ер▓░р│Нр▓ер▓╡р▓╛р▓Чр▓▓р▓┐р▓▓р│Нр▓▓. р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓Жр▓пр│Нр▓Хр│Жр▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓Тр▓Вр▓жр▓ир│Нр▓ир│Б р▓Жр▓░р▓┐р▓╕р▓┐.',
    times: ['р▓мр│Жр▓│р▓┐р▓Чр│Нр▓Чр│Ж 10:00', 'р▓ор▓зр│Нр▓пр▓╛р▓╣р│Нр▓и 12:00', 'р▓ор▓зр│Нр▓пр▓╛р▓╣р│Нр▓и 2:00', 'р▓╕р▓Вр▓Ьр│Ж 4:00'],
    museums: [
      'р▓░р▓╛р▓╖р│Нр▓Яр│Нр▓░р│Ар▓п р▓╡р▓╕р│Нр▓др│Бр▓╕р▓Вр▓Чр│Нр▓░р▓╣р▓╛р▓▓р▓п, р▓ир▓╡р▓жр│Жр▓╣р▓▓р▓┐',
      'р▓нр▓╛р▓░р▓др│Ар▓п р▓╡р▓╕р│Нр▓др│Бр▓╕р▓Вр▓Чр│Нр▓░р▓╣р▓╛р▓▓р▓п, р▓Хр│Лр▓▓р│Нр▓Хр▓др│Нр▓др▓╛',
      'р▓╕р▓╛р▓▓р▓╛р▓░р│Н р▓Ьр▓Вр▓Чр│Н р▓╡р▓╕р│Нр▓др│Бр▓╕р▓Вр▓Чр│Нр▓░р▓╣р▓╛р▓▓р▓п, р▓╣р│Ир▓жр▓░р▓╛р▓мр▓╛р▓жр│Н',
      'р▓Ыр▓др│Нр▓░р▓кр▓др▓┐ р▓╢р▓┐р▓╡р▓╛р▓Ьр▓┐ р▓ор▓╣р▓╛р▓░р▓╛р▓Ьр│Н р▓╡р▓╕р│Нр▓др│Б р▓╕р▓Вр▓Чр│Нр▓░р▓╣р▓╛р▓▓р▓п, р▓ор│Бр▓Вр▓мр│И',
    ],
  },
};

type ChatStep =
  | 'start' | 'select_museum' | 'select_experience' | 'select_date' | 'select_time'
  | 'select_quantity' | 'confirm_order' | 'payment' | 'ticket_issued' | 'faq';

export default function ChatInterface({ lang }: { lang: 'en' | 'hi' | 'bn' | 'ta' | 'te' | 'kn' }) {
  const t = translations[lang];
  const [messages, setMessages] = useState<Message[]>([]);
  const [step, setStep] = useState<ChatStep>('start');
  const [order, setOrder] = useState<TicketOrder>({
    museum: null,
    type: null,
    date: null,
    time: null,
    tickets: { adult: 1, child: 0 },
  });
  const [isBotTyping, setIsBotTyping] = useState(false);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const initialLoadRef = useRef(true);

  const addMessage = (sender: 'user' | 'bot', content: React.ReactNode) => {
    const id = `${Date.now()}-${Math.random()}`;
    setMessages(prev => [...prev, { id, sender, content }]);
    if (sender === 'user') {
      setIsBotTyping(true);
    }
  };
  
  const handleBotResponse = (callback: () => void) => {
    setTimeout(() => {
      setIsBotTyping(false);
      callback();
    }, 1000 + Math.random() * 500);
  }

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages, isBotTyping]);

  useEffect(() => {
    if (initialLoadRef.current && messages.length === 0) {
      addMessage('bot', t.welcome);
      handleBotResponse(() => setStep('start'));
      initialLoadRef.current = false;
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const handleStartSelection = (selection: 'book' | 'faq') => {
    addMessage('user', selection === 'book' ? t.bookTickets : t.askQuestion);
    handleBotResponse(() => {
      if (selection === 'book') {
        addMessage('bot', t.selectMuseum);
        setStep('select_museum');
      } else {
        addMessage('bot', t.askMeAnything);
        setStep('faq');
      }
    });
  };

  const handleFaqQuestion = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const question = formData.get('question') as string;
    if (!question) return;

    addMessage('user', question);
    e.currentTarget.reset();
    
    const answer = await getAnswer({question, lang});
    
    setIsBotTyping(false);

    if (answer === 'BOOK_TICKETS') {
        addMessage('bot', t.selectMuseum);
        setStep('select_museum');
    } else {
        addMessage('bot', answer);
        // After answering, we can guide the user back to the main options.
        handleBotResponse(() => setStep('start'));
    }
  }
  
  const handleMuseumSelection = (museum: string) => {
    addMessage('user', museum);
    setOrder(prev => ({ ...prev, museum }));
    handleBotResponse(() => {
        addMessage('bot', t.chooseExperience);
        setStep('select_experience');
    });
  }

  const handleExperienceSelection = (selection: 'general' | 'special') => {
    const experienceText = selection === 'general' ? t.generalAdmission : t.specialExhibition;
    addMessage('user', experienceText);
    setOrder(prev => ({ ...prev, type: selection === 'general' ? 'General Admission' : 'Special Exhibition: "Cosmos"' }));
    handleBotResponse(() => {
      addMessage('bot', t.selectDate);
      setStep('select_date');
    });
  };

  const handleDateSelection = (date: Date | undefined) => {
    if (!date) return;
    addMessage('user', date.toLocaleDateString(lang));
    setOrder(prev => ({ ...prev, date }));
    handleBotResponse(() => {
      addMessage('bot', t.selectTime);
      setStep('select_time');
    });
  };

  const handleTimeSelection = (time: string) => {
    addMessage('user', time);
    setOrder(prev => ({ ...prev, time }));
    handleBotResponse(() => {
      addMessage('bot', t.selectQuantity);
      setStep('select_quantity');
    });
  };
  
  const handleQuantityChange = (type: 'adult' | 'child', value: number) => {
    setOrder(prev => ({ ...prev, tickets: { ...prev.tickets, [type]: Math.max(0, value) }}));
  }

  const handleConfirmQuantity = () => {
    addMessage('user', `${order.tickets.adult} ${t.adult}, ${order.tickets.child} ${t.child}`);
    handleBotResponse(() => {
      addMessage('bot', <div><p>{t.orderSummary}</p><TicketSummary order={order} lang={lang} /></div>);
      setStep('confirm_order');
    });
  }
  
  const handlePayment = () => {
    addMessage('user', t.proceedToPayment);
    handleBotResponse(() => setStep('payment'));
  }
  
  const handlePaymentSuccess = () => {
    addMessage('bot', t.paymentSuccessful);
    handleBotResponse(() => {
        addMessage('bot', <div><p>{t.ticketIssued}</p><DigitalTicket order={order} lang={lang} /></div>);
        setStep('ticket_issued');
    });
  }

  const renderInput = () => {
    switch (step) {
      case 'start':
        return (
          <div className="flex gap-2 p-2">
            <Button onClick={() => handleStartSelection('book')} className="w-full soft-shadow">{t.bookTickets}</Button>
            <Button onClick={() => handleStartSelection('faq')} variant="secondary" className="w-full soft-shadow">{t.askQuestion}</Button>
          </div>
        );
      case 'faq':
        return (
          <form onSubmit={handleFaqQuestion} className="flex gap-2 p-2">
            <Input name="question" placeholder={t.askMeAnything} className="flex-1" />
            <Button type="submit" size="icon" className="soft-shadow">
              <Send />
            </Button>
          </form>
        );
      case 'select_museum':
        return (
          <div className="grid grid-cols-1 gap-2 p-2 sm:grid-cols-2">
            {t.museums.map(museum => <Button key={museum} variant="secondary" onClick={() => handleMuseumSelection(museum)} className="soft-shadow text-center">{museum}</Button>)}
          </div>
        );
      case 'select_experience':
        return (
          <div className="flex gap-2 p-2">
            <Button onClick={() => handleExperienceSelection('general')} className="w-full soft-shadow">{t.generalAdmission}</Button>
            <Button onClick={() => handleExperienceSelection('special')} variant="secondary" className="w-full soft-shadow">{t.specialExhibition}</Button>
          </div>
        );
      case 'select_date':
          return <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="flex justify-center"><Calendar mode="single" onSelect={handleDateSelection} className="m-4 rounded-lg border card-shadow" selected={order.date ?? undefined} /></motion.div>
      case 'select_time':
        return (
          <div className="grid grid-cols-2 gap-2 p-2">
            {t.times.map(time => <Button key={time} variant="secondary" onClick={() => handleTimeSelection(time)} className="soft-shadow">{time}</Button>)}
          </div>
        );
      case 'select_quantity':
        return (
            <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="space-y-4 rounded-md border bg-card p-4 card-shadow">
                <div className="flex items-center justify-between">
                    <span className="font-medium">{t.adult}</span>
                    <div className="flex items-center gap-2">
                        <Button size="icon" variant="outline" onClick={() => handleQuantityChange('adult', order.tickets.adult - 1)}>-</Button>
                        <span className="w-8 text-center">{order.tickets.adult}</span>
                        <Button size="icon" variant="outline" onClick={() => handleQuantityChange('adult', order.tickets.adult + 1)}>+</Button>
                    </div>
                </div>
                 <div className="flex items-center justify-between">
                    <span className="font-medium">{t.child}</span>
                    <div className="flex items-center gap-2">
                        <Button size="icon" variant="outline" onClick={() => handleQuantityChange('child', order.tickets.child - 1)}>-</Button>
                        <span className="w-8 text-center">{order.tickets.child}</span>
                        <Button size="icon" variant="outline" onClick={() => handleQuantityChange('child', order.tickets.child + 1)}>+</Button>
                    </div>
                </div>
                <Button onClick={handleConfirmQuantity} className="w-full soft-shadow">{t.proceedToPayment}</Button>
            </motion.div>
        );
      case 'confirm_order':
          return <div className="p-2"><Button onClick={handlePayment} className="w-full soft-shadow">{t.proceedToPayment}</Button></div>;
      case 'payment':
          return <PaymentDialog open={true} onPaymentSuccess={handlePaymentSuccess} onOpenChange={() => setStep('confirm_order')} />;

      default:
        return null;
    }
  };

  return (
    <div className="flex h-[calc(100vh-4rem)] flex-col">
      <div ref={scrollAreaRef} className="flex-1 overflow-y-auto p-4 space-y-4">
        <AnimatePresence>
            {messages.map(msg => (
                <motion.div key={msg.id} initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3 }}>
                    <ChatBubble sender={msg.sender}>{msg.content}</ChatBubble>
                </motion.div>
            ))}
            {isBotTyping && <motion.div key="typing" initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3 }}><ChatBubble sender="bot">...</ChatBubble></motion.div>}
        </AnimatePresence>
      </div>
      <div className="border-t bg-background p-2">
        {renderInput()}
      </div>
    </div>
  );
}
